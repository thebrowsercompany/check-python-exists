name: 'Check that Python is available'
description: 'Verify that the desired Python version is available on the running host.'

inputs:
  python-version:
    description: "Exact version of Python. Will override any .python-version file provided either by default or in the python-version-file parameter."
    default: ''
  python-version-file:
    description: "Path to the .python-version file to use to select the desired Python version. This does not support the full flexibility of the .python-version specification but instead only supports a single line in the file with only a single version on that line. Anything else is undefined."
    default: '.python-version'
  is-self-hosted:
    description: "Boolean indicating if the runner is self hosted or not, defaults to true."
    required: false
    default: 'true'

outputs:
  python-version:
    description: "The actual version of Python selected."
    value: ${{ steps.finalize.outputs.python-version }}
  python-path:
    description: "The path to the expected Python executable."
    value: ${{ steps.finalize.outputs.python-path }}

runs:
  using: 'composite'
  steps:
    - name: GHA setup-python for GH hosted runner
      id: gha-setup-python
      if: inputs.is-self-hosted != 'true'
      uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # 5.0.0
      with:
        python-version: ${{ inputs.python-version }}
    - name: Check desired Python is available and set outputs
      id: finalize
      shell: bash
      run: |
        if [[ "${{ inputs.is-self-hosted }}" != "true" ]]; then
          echo "python-version=${{ steps.bcny-check-python.outputs.python-version }}" >> $GITHUB_OUTPUT
          echo "python-path=${{ steps.bcny-check-python.outputs.python-path }}" >> $GITHUB_OUTPUT
        else
          EXPECTED_VERSION=""
          if [[ -n "${{ inputs.python-version }}" ]]; then
            EXPECTED_VERSION="${{ inputs.python-version }}"
          elif [[ -f "${{ inputs.python-version-file }}" ]]; then
            EXPECTED_VERSION="$(cat "${{ inputs.python-version-file }}" | cut -d' ' -f1)"
          fi

          command -v python$EXPECTED_VERSION > /dev/null 2>&1
          EXPECTED_PYTHON_PATH="$(which python${EXPECTED_VERSION})"
          echo "python-version=${EXPECTED_VERSION}" >> $GITHUB_OUTPUT
          echo "python-path=${EXPECTED_PYTHON_PATH}" >> $GITHUB_OUTPUT
        fi
