name: 'Check that Python is available'
description: 'Verify that the desired Python version is available on the running host.'

inputs:
  python-version:
    description: "Exact version of Python. Will override any .python-version file provided either by default or in the python-version-file parameter."
    default: ''
  python-version-file:
    description: "Path to the .python-version file to use to select the desired Python version. This does not support the full flexibility of the .python-version specification but instead only supports a single line in the file with only a single version on that line. Anything else is undefined."
    default: '.python-version'
  is-self-hosted:
    description: "Boolean indicating if the runner is self hosted or not, defaults to true."
    required: false
    default: 'true'

outputs:
  python-version:
    description: "The actual version of Python selected."
    value: ${{ steps.finalize.outputs.python-version }}
  python-path:
    description: "The path to the expected Python executable."
    value: ${{ steps.finalize.outputs.python-path }}

runs:
  using: 'composite'
  steps:
    - name: GHA setup-python for GH hosted runner
      id: gha-setup-python
      # We want to run this on anything but on self-hosted macs.
      if: !(inputs.is-self-hosted == 'true' && runner.os == 'macOS')
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # 5.3.0
      with:
        python-version: ${{ inputs.python-version }}
    - name: Check desired Python is available and set outputs
      id: finalize
      shell: bash
      run: |
        if [[ "${{ steps.gha-setup-python.outcome }}" == "success" ]]; then
          # On macOS, we want something like python3.11, not python3.11.8 like
          # what setup-python above will output.
          # On Windows, we sadly just want python3.
          EXPECTED_VERSION="$(python3 -c "import sys;print('.'.join(sys.argv[1].rsplit('.',3)[:1 if sys.platform=='win32' else 2]))" ${{ steps.gha-setup-python.outputs.python-version }})"
          EXPECTED_PYTHON_PATH="${{ steps.gha-setup-python.outputs.python-path }}"
        else
          EXPECTED_VERSION=""
          if [[ -n "${{ inputs.python-version }}" ]]; then
            EXPECTED_VERSION="${{ inputs.python-version }}"
          elif [[ -f "${{ inputs.python-version-file }}" ]]; then
            EXPECTED_VERSION="$(cat "${{ inputs.python-version-file }}" | cut -d' ' -f1)"
          fi

          command -v python$EXPECTED_VERSION > /dev/null 2>&1
          EXPECTED_PYTHON_PATH="$(which python${EXPECTED_VERSION})"
        fi
        echo "python-version=${EXPECTED_VERSION}" >> $GITHUB_OUTPUT
        echo "python-path=${EXPECTED_PYTHON_PATH}" >> $GITHUB_OUTPUT
        echo "Found python${EXPECTED_VERSION} at ${EXPECTED_PYTHON_PATH}"
